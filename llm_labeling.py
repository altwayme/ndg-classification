import json
import requests
import time
from requests.exceptions import ConnectionError, RequestException
import logging

# Настройка логирования
logging.basicConfig(
    filename='classification_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

# Учетные данные (удалены для публикации)
folder_id = "<FOLDER_ID>"
api_key = "<API_KEY>"

# Улучшенный системный промпт
system_prompt = """
Ты — классификатор статей. Твоя задача — классифицировать статью по национальным целям развития Российской Федерации на период до 2030 года и на перспективу до 2036 года. Верни результат строго в формате списка цифр от 0 до 7, например, [1], [1, 3] или [0], без лишнего текста, комментариев или ссылок. Если статья не относится ни к одной из целей, верни [0]. Если относится к нескольким целям, укажи все подходящие цифры в списке, например, [1, 3, 7]. Важно, что целей может быть больше 2 или 3. Не используй одиночные числа (например, '1'), только списки в квадратных скобках. Вот критерии (при классификации ориентируйся в первую очередь на содержание цели, которое определяется поставленными для неё задачами, указанными после каждой цели):
- 0: Статья не относится ни к одной из национальных целей.
- 1: Сохранение населения, укрепление здоровья и повышение благополучия людей, поддержка семьи. Задачи:
  - Повышение рождаемости (суммарный коэффициент рождаемости до 1,6 к 2030 году и до 1,8 к 2036 году, особенно третьих и последующих детей).
  - Увеличение ожидаемой продолжительности жизни (до 78 лет к 2030 году и до 81 года к 2036 году, включая здоровую жизнь).
  - Снижение дифференциации ожидаемой продолжительности жизни между регионами.
  - Снижение временной нетрудоспособности через здоровый образ жизни, профилактику заболеваний и занятия спортом.
  - Увеличение удовлетворенности условиями для занятий спортом.
  - Увеличение числа пожилых и инвалидов, получающих услуги долговременного ухода (до 500 тыс. человек к 2030 году).
  - Улучшение условий для медицинской реабилитации, переобучения и трудоустройства участников СВО.
  - Создание цифровой платформы для управления здоровьем на основе данных.
  - Снижение уровня бедности (ниже 7% к 2030 году, ниже 5% к 2036 году, для многодетных семей — до 12% к 2030 году и 8% к 2036 году).
  - Снижение неравенства доходов (коэффициент Джини до 0,37 к 2030 году и 0,33 к 2036 году).
  - Повышение минимального размера оплаты труда (до 35 тыс. рублей к 2030 году).
  - Утверждение новых систем оплаты труда для работников бюджетного сектора с 2027 года.

- 2: Реализация потенциала каждого человека, развитие его талантов, воспитание патриотичной и социально ответственной личности. Задачи:
  - Создание условий для воспитания патриотичной личности на основе традиционных российских ценностей.
  - Увеличение числа иностранных студентов в России (до 500 тыс. к 2030 году).
  - Увеличение доли молодежи, участвующей в программах профессионального и патриотического развития (до 75% к 2030 году).
  - Увеличение доли молодежи, верящей в возможности самореализации в России (до 85% к 2030 году).
  - Увеличение доли молодежи, вовлеченной в добровольческую деятельность (до 45% к 2030 году).
  - Создание системы выявления и поддержки талантов детей и молодежи (100% охват к 2030 году).
  - Продвижение традиционных ценностей через проекты в сфере культуры (70% к 2030 году, 80% к 2036 году).
  - Повышение удовлетворенности работой организаций культуры.
  - Развитие системы профессионального развития педагогов (10% ежегодно к 2030 году).

- 3: Комфортная и безопасная среда для жизни. Задачи:
  - Улучшение качества среды для жизни в опорных населенных пунктах (на 30% к 2030 году, на 60% к 2036 году).
  - Обеспечение жильем (33 кв. м на человека к 2030 году, 38 кв. м к 2036 году).
  - Обновление жилищного фонда (на 20% к 2030 году по сравнению с 2019 годом).
  - Сокращение непригодного жилья.
  - Повышение доступности жилья на первичном рынке.
  - Благоустройство 30 тыс. общественных территорий и 1600 проектов в малых городах к 2030 году.
  - Модернизация коммунальной инфраструктуры для 20 млн человек к 2030 году.
  - Строительство 2 тыс. объектов водоснабжения к 2030 году.
  - Повышение энергоэффективности в ЖКХ и строительстве.
  - Обновление общественного транспорта (до 85% к 2030 году).
  - Увеличение доли нормативных дорог (85% федеральных, 60% региональных к 2030 году).
  - Снижение смертности от ДТП (в 1,5 раза к 2030 году, в 2 раза к 2036 году).
  - Увеличение авиационной подвижности (на 50% к 2030 году, 50% отечественных самолетов).
  - Капитальный ремонт зданий детских садов и школ к 2030 году.
  - Газификация 1,6 млн домовладений к 2030 году, 3 млн к 2036 году.
  - Создание 900 центров воспроизведения аудиовизуального контента в малых городах к 2030 году.

- 4: Экологическое благополучие. Задачи:
  - Формирование экономики замкнутого цикла (100% сортировка ТКО, 50% захоронение, 25% переработка к 2030 году).
  - Снижение выбросов опасных веществ в городах (в 2 раза к 2036 году).
  - Ликвидация 50 опасных объектов накопленного вреда к 2030 году, утилизация 50% отходов I и II классов к 2036 году.
  - Снижение сброса неочищенных сточных вод (в 2 раза к 2036 году), сохранение озера Байкал.
  - Сохранение лесов, биоразнообразия, развитие экотуризма в национальных парках.

- 5: Устойчивая и динамичная экономика. Задачи:
  - Рост ВВП выше среднемирового, 4-е место в мире по ВВП (по ППС) к 2030 году.
  - Снижение доли импорта в ВВП до 17% к 2030 году.
  - Рост инвестиций в основной капитал на 60% к 2030 году.
  - Устойчивый рост доходов населения и пенсий (не ниже инфляции).
  - Рост доходов в малом и среднем бизнесе (в 1,2 раза выше ВВП к 2030 году).
  - Рост капитализации фондового рынка (до 66% ВВП к 2030 году, 75% к 2036 году).
  - Вхождение в топ-25 стран по плотности роботизации к 2030 году.
  - Вовлечение 40% предприятий в проекты повышения производительности труда к 2030 году.
  - Создание системы подготовки кадров для приоритетных отраслей.
  - Освоение нескольких квалификаций 30% студентов к 2030 году.
  - Снижение разрыва в бюджетной обеспеченности регионов.
  - Рост доли туризма в ВВП до 5% к 2030 году.
  - Рост экспорта несырьевых товаров на 2/3 к 2030 году.
  - Рост производства и экспорта агропромышленной продукции (на 25% и в 1,5 раза к 2030 году).
  - Формирование партнерств для внешнеэкономической деятельности.
  - Увеличение экспорта туристских услуг в 3 раза к 2030 году.
  - Рост перевозок по международным коридорам (в 1,5 раза к 2030 году).
  - Рост доли креативных индустрий.
  - Адаптация к изменениям климата.
  - Создание системы мониторинга климатически активных веществ.

- 6: Технологическое лидерство. Задачи:
  - Обеспечение технологической независимости в биоэкономике, здоровье, продовольственной безопасности, беспилотных системах, автоматизации, транспорте, данных, ИИ, новых материалах, космосе, энергетике.
  - Рост валовой добавленной стоимости в обрабатывающей промышленности на 40% к 2030 году.
  - Вхождение в топ-10 стран по объему научных исследований к 2030 году.
  - Увеличение затрат на исследования до 2% ВВП к 2030 году.
  - Рост доли отечественных высокотехнологичных товаров в 1,5 раза к 2030 году.
  - Рост выручки малых технологических компаний в 7 раз к 2030 году.

- 7: Цифровая трансформация государственного и муниципального управления, экономики и социальной сферы. Задачи:
  - Достижение "цифровой зрелости" в управлении, экономике, социальной сфере (автоматизация транзакций, управление на основе данных, ИИ).
  - Формирование рынка данных (хранение, обмен, защита).
  - Обеспечение высокоскоростного интернета для 97% домохозяйств к 2030 году, 99% к 2036 году.
  - Рост инвестиций в ИТ в 2 раза выше роста ВВП.
  - Переход 80% организаций на российское ПО к 2030 году.
  - Использование российского ПО в госорганах (95% к 2030 году).
  - Предоставление 99% госуслуг в электронной форме к 2030 году.
  - Формирование системы подбора кадров для госуправления.
  - Повышение удовлетворенности граждан работой госслужащих на 50% к 2030 году.
  - Противодействие киберпреступлениям.
  - Обеспечение сетевого суверенитета и информационной безопасности.
"""

# Функция для отправки синхронного запроса к YandexGPT Pro 32k
def classify_article(article_text, folder_id, api_key, retries=3, delay=5):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {api_key}",
        "x-folder-id": folder_id,
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{folder_id}/yandexgpt-32k/latest",
        "completionOptions": {
            "temperature": 0.3,
            "maxTokens": 50
        },
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": article_text}
        ]
    }

    for attempt in range(retries):
        try:
            response = requests.post(url, headers=headers, json=data, timeout=30)
            response.raise_for_status()
            result = response.json()
            return result["result"]["alternatives"][0]["message"]["text"]
        except ConnectionError as e:
            print(f"[Попытка {attempt + 1}/{retries}] Ошибка соединения: {e}")
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                return f"Ошибка: Не удалось установить соединение после {retries} попыток"
        except RequestException as e:
            return f"Ошибка запроса: {e}"
        except ValueError as e:
            return f"Ошибка: Неверный формат ответа от сервера: {e}"

# Функция для парсинга и исправления ответа YandexGPT
def parse_classification(classification_text):
    try:
        classification_text = classification_text.strip()
        
        # Если ответ — одиночное число, преобразуем в список
        if classification_text.isdigit() and 0 <= int(classification_text) <= 7:
            return [int(classification_text)]
        
        # Проверка формата списка
        if not classification_text.startswith("[") or not classification_text.endswith("]"):
            return f"Неверный формат ответа (ожидается список, например, [1, 3]), получено: '{classification_text}'"
        
        numbers = classification_text[1:-1].split(",")
        classification_list = [int(num.strip()) for num in numbers if num.strip()]
        
        if all(0 <= num <= 7 for num in classification_list):
            return classification_list
        else:
            return f"Числа должны быть в диапазоне от 0 до 7, получено: '{classification_text}'"
    except Exception as e:
        return f"Неверный формат ответа: {e}, получено: '{classification_text}'"

# Функция для сохранения JSON
def save_to_json(articles, filename="classified_articles.json"):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(articles, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Ошибка сохранения файла '{filename}': {e}")

# Функция для обработки статей
def process_articles(articles):
    total_articles = len(articles)
    processed_articles = 0

    for key, article_data in articles.items():
        processed_articles += 1
        article = article_data["data"]
        article_title = article.get("title", "Без названия")
        progress = f"[{processed_articles}/{total_articles}]"
        
        if not article.get("text") or article["text"].strip() == "Не найдено":
            article["classification"] = "Текст отсутствует"
            print(f"{progress} Статья '{article_title}' пропущена: текст отсутствует")
        else:
            try:
                classification_text = classify_article(article["text"], folder_id, api_key)
                classification = parse_classification(classification_text)
                
                if isinstance(classification, list):
                    article["classification"] = classification
                    print(f"{progress} Статья '{article_title}' классифицирована как цели {classification}")
                else:
                    article["classification"] = classification
                    print(f"{progress} ОШИБКА: {classification} для статьи '{article_title}'")
                    logging.error(f"Статья '{article_title}': {classification}")
            except Exception as e:
                article["classification"] = f"Ошибка: {str(e)}"
                print(f"{progress} ОШИБКА: Ошибка классификации: {e} для статьи '{article_title}'")
                logging.error(f"Статья '{article_title}': Ошибка классификации: {e}")
        
        save_to_json(articles)
        time.sleep(0.5)

# Загрузка JSON
try:
    with open("articles.json", "r", encoding="utf-8") as f:
        articles = json.load(f)
except FileNotFoundError:
    print("Ошибка: Файл 'articles.json' не найден.")
    exit(1)
except json.JSONDecodeError as e:
    print(f"Ошибка: Неверный формат JSON в файле 'articles.json': {e}")
    exit(1)

# Запуск обработки
process_articles(articles)

print("Обработка завершена! Результаты сохранены в classified_articles.json")
